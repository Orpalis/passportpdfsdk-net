/* 
 * PassportPDF
 *
 * Copyright Â© 2018 ORPALIS - http://www.orpalis.com
 *
 * OpenAPI spec version: v1
 * Contact: contact@orpalis.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PassportPDF.Client;
using PassportPDF.Model;

namespace PassportPDF.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Closes a previously uploaded image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeParameters">An ImageCloseParameters object specifying the parameters of the action. (optional)</param>
        /// <returns>ImageCloseResponse</returns>
        ImageCloseResponse CloseImage (ImageCloseParameters closeParameters = null);

        /// <summary>
        /// Closes a previously uploaded image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeParameters">An ImageCloseParameters object specifying the parameters of the action. (optional)</param>
        /// <returns>ApiResponse of ImageCloseResponse</returns>
        ApiResponse<ImageCloseResponse> CloseImageWithHttpInfo (ImageCloseParameters closeParameters = null);
        /// <summary>
        /// Gets the supported file extensions by the image loading actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>StringArrayResponse</returns>
        StringArrayResponse GetSupportedImageFileExtensions ();

        /// <summary>
        /// Gets the supported file extensions by the image loading actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StringArrayResponse</returns>
        ApiResponse<StringArrayResponse> GetSupportedImageFileExtensionsWithHttpInfo ();
        /// <summary>
        /// Loads the provided image file.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadImageParameters">A LoadImageFromByteArrayParameters object specifying the parameters of the action.</param>
        /// <returns>LoadImageResponse</returns>
        LoadImageResponse LoadImage (LoadImageFromByteArrayParameters loadImageParameters);

        /// <summary>
        /// Loads the provided image file.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadImageParameters">A LoadImageFromByteArrayParameters object specifying the parameters of the action.</param>
        /// <returns>ApiResponse of LoadImageResponse</returns>
        ApiResponse<LoadImageResponse> LoadImageWithHttpInfo (LoadImageFromByteArrayParameters loadImageParameters);
        /// <summary>
        /// Loads the provided image file using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileData">Specifies the stream of data of the file to be uploaded.</param>
        /// <param name="contentEncoding">Specifies the encoding of the fileData content. (optional, default to 1)</param>
        /// <param name="fileName">Specifies the name of the file to be uploaded. (optional)</param>
        /// <returns>LoadImageResponse</returns>
        LoadImageResponse LoadImageMultipart (System.IO.Stream fileData, string contentEncoding = null, string fileName = null);

        /// <summary>
        /// Loads the provided image file using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileData">Specifies the stream of data of the file to be uploaded.</param>
        /// <param name="contentEncoding">Specifies the encoding of the fileData content. (optional, default to 1)</param>
        /// <param name="fileName">Specifies the name of the file to be uploaded. (optional)</param>
        /// <returns>ApiResponse of LoadImageResponse</returns>
        ApiResponse<LoadImageResponse> LoadImageMultipartWithHttpInfo (System.IO.Stream fileData, string contentEncoding = null, string fileName = null);
        /// <summary>
        /// Reads barcodes from a previously uploaded image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBarcodeParameters">An ImageReadBarcodesParameters object specifying the parameters of the action.</param>
        /// <returns>ReadBarcodesResponse</returns>
        ReadBarcodesResponse ReadBarcodes (ImageReadBarcodesParameters readBarcodeParameters);

        /// <summary>
        /// Reads barcodes from a previously uploaded image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBarcodeParameters">An ImageReadBarcodesParameters object specifying the parameters of the action.</param>
        /// <returns>ApiResponse of ReadBarcodesResponse</returns>
        ApiResponse<ReadBarcodesResponse> ReadBarcodesWithHttpInfo (ImageReadBarcodesParameters readBarcodeParameters);
        /// <summary>
        /// Saves a previously uploaded image as JPEG.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsJPEGParameters">An ImageSaveAsJPEGParameters object specifying the parameters of the action.</param>
        /// <returns>ImageSaveAsJPEGResponse</returns>
        ImageSaveAsJPEGResponse SaveAsJPEG (ImageSaveAsJPEGParameters saveAsJPEGParameters);

        /// <summary>
        /// Saves a previously uploaded image as JPEG.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsJPEGParameters">An ImageSaveAsJPEGParameters object specifying the parameters of the action.</param>
        /// <returns>ApiResponse of ImageSaveAsJPEGResponse</returns>
        ApiResponse<ImageSaveAsJPEGResponse> SaveAsJPEGWithHttpInfo (ImageSaveAsJPEGParameters saveAsJPEGParameters);
        /// <summary>
        /// Saves a previously uploaded image as PNG.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsPNGParameters">An ImageSaveAsPNGParameters object specifying the parameters of the action.</param>
        /// <returns>ImageSaveAsPNGResponse</returns>
        ImageSaveAsPNGResponse SaveAsPNG (ImageSaveAsPNGParameters saveAsPNGParameters);

        /// <summary>
        /// Saves a previously uploaded image as PNG.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsPNGParameters">An ImageSaveAsPNGParameters object specifying the parameters of the action.</param>
        /// <returns>ApiResponse of ImageSaveAsPNGResponse</returns>
        ApiResponse<ImageSaveAsPNGResponse> SaveAsPNGWithHttpInfo (ImageSaveAsPNGParameters saveAsPNGParameters);
        /// <summary>
        /// Saves a previously uploaded image as TIFF.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsTIFFParameters">An ImageSaveAsTIFFParameters object specifying the parameters of the action.</param>
        /// <returns>ImageSaveAsTIFFResponse</returns>
        ImageSaveAsTIFFResponse SaveAsTIFF (ImageSaveAsTIFFParameters saveAsTIFFParameters);

        /// <summary>
        /// Saves a previously uploaded image as TIFF.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsTIFFParameters">An ImageSaveAsTIFFParameters object specifying the parameters of the action.</param>
        /// <returns>ApiResponse of ImageSaveAsTIFFResponse</returns>
        ApiResponse<ImageSaveAsTIFFResponse> SaveAsTIFFWithHttpInfo (ImageSaveAsTIFFParameters saveAsTIFFParameters);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Closes a previously uploaded image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeParameters">An ImageCloseParameters object specifying the parameters of the action. (optional)</param>
        /// <returns>Task of ImageCloseResponse</returns>
        System.Threading.Tasks.Task<ImageCloseResponse> CloseImageAsync (ImageCloseParameters closeParameters = null);

        /// <summary>
        /// Closes a previously uploaded image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeParameters">An ImageCloseParameters object specifying the parameters of the action. (optional)</param>
        /// <returns>Task of ApiResponse (ImageCloseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageCloseResponse>> CloseImageAsyncWithHttpInfo (ImageCloseParameters closeParameters = null);
        /// <summary>
        /// Gets the supported file extensions by the image loading actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StringArrayResponse</returns>
        System.Threading.Tasks.Task<StringArrayResponse> GetSupportedImageFileExtensionsAsync ();

        /// <summary>
        /// Gets the supported file extensions by the image loading actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StringArrayResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringArrayResponse>> GetSupportedImageFileExtensionsAsyncWithHttpInfo ();
        /// <summary>
        /// Loads the provided image file.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadImageParameters">A LoadImageFromByteArrayParameters object specifying the parameters of the action.</param>
        /// <returns>Task of LoadImageResponse</returns>
        System.Threading.Tasks.Task<LoadImageResponse> LoadImageAsync (LoadImageFromByteArrayParameters loadImageParameters);

        /// <summary>
        /// Loads the provided image file.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadImageParameters">A LoadImageFromByteArrayParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ApiResponse (LoadImageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoadImageResponse>> LoadImageAsyncWithHttpInfo (LoadImageFromByteArrayParameters loadImageParameters);
        /// <summary>
        /// Loads the provided image file using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileData">Specifies the stream of data of the file to be uploaded.</param>
        /// <param name="contentEncoding">Specifies the encoding of the fileData content. (optional, default to 1)</param>
        /// <param name="fileName">Specifies the name of the file to be uploaded. (optional)</param>
        /// <returns>Task of LoadImageResponse</returns>
        System.Threading.Tasks.Task<LoadImageResponse> LoadImageMultipartAsync (System.IO.Stream fileData, string contentEncoding = null, string fileName = null);

        /// <summary>
        /// Loads the provided image file using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileData">Specifies the stream of data of the file to be uploaded.</param>
        /// <param name="contentEncoding">Specifies the encoding of the fileData content. (optional, default to 1)</param>
        /// <param name="fileName">Specifies the name of the file to be uploaded. (optional)</param>
        /// <returns>Task of ApiResponse (LoadImageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoadImageResponse>> LoadImageMultipartAsyncWithHttpInfo (System.IO.Stream fileData, string contentEncoding = null, string fileName = null);
        /// <summary>
        /// Reads barcodes from a previously uploaded image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBarcodeParameters">An ImageReadBarcodesParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ReadBarcodesResponse</returns>
        System.Threading.Tasks.Task<ReadBarcodesResponse> ReadBarcodesAsync (ImageReadBarcodesParameters readBarcodeParameters);

        /// <summary>
        /// Reads barcodes from a previously uploaded image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBarcodeParameters">An ImageReadBarcodesParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ApiResponse (ReadBarcodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReadBarcodesResponse>> ReadBarcodesAsyncWithHttpInfo (ImageReadBarcodesParameters readBarcodeParameters);
        /// <summary>
        /// Saves a previously uploaded image as JPEG.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsJPEGParameters">An ImageSaveAsJPEGParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ImageSaveAsJPEGResponse</returns>
        System.Threading.Tasks.Task<ImageSaveAsJPEGResponse> SaveAsJPEGAsync (ImageSaveAsJPEGParameters saveAsJPEGParameters);

        /// <summary>
        /// Saves a previously uploaded image as JPEG.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsJPEGParameters">An ImageSaveAsJPEGParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ApiResponse (ImageSaveAsJPEGResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageSaveAsJPEGResponse>> SaveAsJPEGAsyncWithHttpInfo (ImageSaveAsJPEGParameters saveAsJPEGParameters);
        /// <summary>
        /// Saves a previously uploaded image as PNG.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsPNGParameters">An ImageSaveAsPNGParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ImageSaveAsPNGResponse</returns>
        System.Threading.Tasks.Task<ImageSaveAsPNGResponse> SaveAsPNGAsync (ImageSaveAsPNGParameters saveAsPNGParameters);

        /// <summary>
        /// Saves a previously uploaded image as PNG.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsPNGParameters">An ImageSaveAsPNGParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ApiResponse (ImageSaveAsPNGResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageSaveAsPNGResponse>> SaveAsPNGAsyncWithHttpInfo (ImageSaveAsPNGParameters saveAsPNGParameters);
        /// <summary>
        /// Saves a previously uploaded image as TIFF.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsTIFFParameters">An ImageSaveAsTIFFParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ImageSaveAsTIFFResponse</returns>
        System.Threading.Tasks.Task<ImageSaveAsTIFFResponse> SaveAsTIFFAsync (ImageSaveAsTIFFParameters saveAsTIFFParameters);

        /// <summary>
        /// Saves a previously uploaded image as TIFF.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsTIFFParameters">An ImageSaveAsTIFFParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ApiResponse (ImageSaveAsTIFFResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageSaveAsTIFFResponse>> SaveAsTIFFAsyncWithHttpInfo (ImageSaveAsTIFFParameters saveAsTIFFParameters);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ImageApi : IImageApi
    {
        private PassportPDF.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ImageApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = PassportPDF.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ImageApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PassportPDF.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PassportPDF.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Closes a previously uploaded image. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeParameters">An ImageCloseParameters object specifying the parameters of the action. (optional)</param>
        /// <returns>ImageCloseResponse</returns>
        public ImageCloseResponse CloseImage (ImageCloseParameters closeParameters = null)
        {
             ApiResponse<ImageCloseResponse> localVarResponse = CloseImageWithHttpInfo(closeParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Closes a previously uploaded image. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeParameters">An ImageCloseParameters object specifying the parameters of the action. (optional)</param>
        /// <returns>ApiResponse of ImageCloseResponse</returns>
        public ApiResponse< ImageCloseResponse > CloseImageWithHttpInfo (ImageCloseParameters closeParameters = null)
        {

            var localVarPath = "/api/image/CloseImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeParameters != null && closeParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(closeParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageCloseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageCloseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageCloseResponse)));
        }

        /// <summary>
        /// Closes a previously uploaded image. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeParameters">An ImageCloseParameters object specifying the parameters of the action. (optional)</param>
        /// <returns>Task of ImageCloseResponse</returns>
        public async System.Threading.Tasks.Task<ImageCloseResponse> CloseImageAsync (ImageCloseParameters closeParameters = null)
        {
             ApiResponse<ImageCloseResponse> localVarResponse = await CloseImageAsyncWithHttpInfo(closeParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Closes a previously uploaded image. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeParameters">An ImageCloseParameters object specifying the parameters of the action. (optional)</param>
        /// <returns>Task of ApiResponse (ImageCloseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageCloseResponse>> CloseImageAsyncWithHttpInfo (ImageCloseParameters closeParameters = null)
        {

            var localVarPath = "/api/image/CloseImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeParameters != null && closeParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(closeParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageCloseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageCloseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageCloseResponse)));
        }

        /// <summary>
        /// Gets the supported file extensions by the image loading actions. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>StringArrayResponse</returns>
        public StringArrayResponse GetSupportedImageFileExtensions ()
        {
             ApiResponse<StringArrayResponse> localVarResponse = GetSupportedImageFileExtensionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the supported file extensions by the image loading actions. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StringArrayResponse</returns>
        public ApiResponse< StringArrayResponse > GetSupportedImageFileExtensionsWithHttpInfo ()
        {

            var localVarPath = "/api/image/GetSupportedImageFileExtensions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupportedImageFileExtensions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringArrayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringArrayResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringArrayResponse)));
        }

        /// <summary>
        /// Gets the supported file extensions by the image loading actions. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StringArrayResponse</returns>
        public async System.Threading.Tasks.Task<StringArrayResponse> GetSupportedImageFileExtensionsAsync ()
        {
             ApiResponse<StringArrayResponse> localVarResponse = await GetSupportedImageFileExtensionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the supported file extensions by the image loading actions. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StringArrayResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringArrayResponse>> GetSupportedImageFileExtensionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/image/GetSupportedImageFileExtensions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupportedImageFileExtensions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringArrayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringArrayResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringArrayResponse)));
        }

        /// <summary>
        /// Loads the provided image file.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadImageParameters">A LoadImageFromByteArrayParameters object specifying the parameters of the action.</param>
        /// <returns>LoadImageResponse</returns>
        public LoadImageResponse LoadImage (LoadImageFromByteArrayParameters loadImageParameters)
        {
             ApiResponse<LoadImageResponse> localVarResponse = LoadImageWithHttpInfo(loadImageParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Loads the provided image file.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadImageParameters">A LoadImageFromByteArrayParameters object specifying the parameters of the action.</param>
        /// <returns>ApiResponse of LoadImageResponse</returns>
        public ApiResponse< LoadImageResponse > LoadImageWithHttpInfo (LoadImageFromByteArrayParameters loadImageParameters)
        {
            // verify the required parameter 'loadImageParameters' is set
            if (loadImageParameters == null)
                throw new ApiException(400, "Missing required parameter 'loadImageParameters' when calling ImageApi->LoadImage");

            var localVarPath = "/api/image/LoadImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadImageParameters != null && loadImageParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(loadImageParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loadImageParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoadImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoadImageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LoadImageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoadImageResponse)));
        }

        /// <summary>
        /// Loads the provided image file.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadImageParameters">A LoadImageFromByteArrayParameters object specifying the parameters of the action.</param>
        /// <returns>Task of LoadImageResponse</returns>
        public async System.Threading.Tasks.Task<LoadImageResponse> LoadImageAsync (LoadImageFromByteArrayParameters loadImageParameters)
        {
             ApiResponse<LoadImageResponse> localVarResponse = await LoadImageAsyncWithHttpInfo(loadImageParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Loads the provided image file.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadImageParameters">A LoadImageFromByteArrayParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ApiResponse (LoadImageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoadImageResponse>> LoadImageAsyncWithHttpInfo (LoadImageFromByteArrayParameters loadImageParameters)
        {
            // verify the required parameter 'loadImageParameters' is set
            if (loadImageParameters == null)
                throw new ApiException(400, "Missing required parameter 'loadImageParameters' when calling ImageApi->LoadImage");

            var localVarPath = "/api/image/LoadImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadImageParameters != null && loadImageParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(loadImageParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loadImageParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoadImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoadImageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LoadImageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoadImageResponse)));
        }

        /// <summary>
        /// Loads the provided image file using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileData">Specifies the stream of data of the file to be uploaded.</param>
        /// <param name="contentEncoding">Specifies the encoding of the fileData content. (optional, default to 1)</param>
        /// <param name="fileName">Specifies the name of the file to be uploaded. (optional)</param>
        /// <returns>LoadImageResponse</returns>
        public LoadImageResponse LoadImageMultipart (System.IO.Stream fileData, string contentEncoding = null, string fileName = null)
        {
             ApiResponse<LoadImageResponse> localVarResponse = LoadImageMultipartWithHttpInfo(fileData, contentEncoding, fileName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Loads the provided image file using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileData">Specifies the stream of data of the file to be uploaded.</param>
        /// <param name="contentEncoding">Specifies the encoding of the fileData content. (optional, default to 1)</param>
        /// <param name="fileName">Specifies the name of the file to be uploaded. (optional)</param>
        /// <returns>ApiResponse of LoadImageResponse</returns>
        public ApiResponse< LoadImageResponse > LoadImageMultipartWithHttpInfo (System.IO.Stream fileData, string contentEncoding = null, string fileName = null)
        {
            // verify the required parameter 'fileData' is set
            if (fileData == null)
                throw new ApiException(400, "Missing required parameter 'fileData' when calling ImageApi->LoadImageMultipart");

            var localVarPath = "/api/image/LoadImageMultipart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileData != null) localVarFileParams.Add("fileData", Configuration.ApiClient.ParameterToFile("fileData", fileData));
            if (contentEncoding != null) localVarFormParams.Add("contentEncoding", Configuration.ApiClient.ParameterToString(contentEncoding)); // form parameter
            if (fileName != null) localVarFormParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoadImageMultipart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoadImageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LoadImageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoadImageResponse)));
        }

        /// <summary>
        /// Loads the provided image file using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileData">Specifies the stream of data of the file to be uploaded.</param>
        /// <param name="contentEncoding">Specifies the encoding of the fileData content. (optional, default to 1)</param>
        /// <param name="fileName">Specifies the name of the file to be uploaded. (optional)</param>
        /// <returns>Task of LoadImageResponse</returns>
        public async System.Threading.Tasks.Task<LoadImageResponse> LoadImageMultipartAsync (System.IO.Stream fileData, string contentEncoding = null, string fileName = null)
        {
             ApiResponse<LoadImageResponse> localVarResponse = await LoadImageMultipartAsyncWithHttpInfo(fileData, contentEncoding, fileName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Loads the provided image file using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileData">Specifies the stream of data of the file to be uploaded.</param>
        /// <param name="contentEncoding">Specifies the encoding of the fileData content. (optional, default to 1)</param>
        /// <param name="fileName">Specifies the name of the file to be uploaded. (optional)</param>
        /// <returns>Task of ApiResponse (LoadImageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoadImageResponse>> LoadImageMultipartAsyncWithHttpInfo (System.IO.Stream fileData, string contentEncoding = null, string fileName = null)
        {
            // verify the required parameter 'fileData' is set
            if (fileData == null)
                throw new ApiException(400, "Missing required parameter 'fileData' when calling ImageApi->LoadImageMultipart");

            var localVarPath = "/api/image/LoadImageMultipart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileData != null) localVarFileParams.Add("fileData", Configuration.ApiClient.ParameterToFile("fileData", fileData));
            if (contentEncoding != null) localVarFormParams.Add("contentEncoding", Configuration.ApiClient.ParameterToString(contentEncoding)); // form parameter
            if (fileName != null) localVarFormParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoadImageMultipart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoadImageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LoadImageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoadImageResponse)));
        }

        /// <summary>
        /// Reads barcodes from a previously uploaded image. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBarcodeParameters">An ImageReadBarcodesParameters object specifying the parameters of the action.</param>
        /// <returns>ReadBarcodesResponse</returns>
        public ReadBarcodesResponse ReadBarcodes (ImageReadBarcodesParameters readBarcodeParameters)
        {
             ApiResponse<ReadBarcodesResponse> localVarResponse = ReadBarcodesWithHttpInfo(readBarcodeParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reads barcodes from a previously uploaded image. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBarcodeParameters">An ImageReadBarcodesParameters object specifying the parameters of the action.</param>
        /// <returns>ApiResponse of ReadBarcodesResponse</returns>
        public ApiResponse< ReadBarcodesResponse > ReadBarcodesWithHttpInfo (ImageReadBarcodesParameters readBarcodeParameters)
        {
            // verify the required parameter 'readBarcodeParameters' is set
            if (readBarcodeParameters == null)
                throw new ApiException(400, "Missing required parameter 'readBarcodeParameters' when calling ImageApi->ReadBarcodes");

            var localVarPath = "/api/image/ReadBarcodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (readBarcodeParameters != null && readBarcodeParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(readBarcodeParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = readBarcodeParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadBarcodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReadBarcodesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReadBarcodesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReadBarcodesResponse)));
        }

        /// <summary>
        /// Reads barcodes from a previously uploaded image. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBarcodeParameters">An ImageReadBarcodesParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ReadBarcodesResponse</returns>
        public async System.Threading.Tasks.Task<ReadBarcodesResponse> ReadBarcodesAsync (ImageReadBarcodesParameters readBarcodeParameters)
        {
             ApiResponse<ReadBarcodesResponse> localVarResponse = await ReadBarcodesAsyncWithHttpInfo(readBarcodeParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reads barcodes from a previously uploaded image. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBarcodeParameters">An ImageReadBarcodesParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ApiResponse (ReadBarcodesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReadBarcodesResponse>> ReadBarcodesAsyncWithHttpInfo (ImageReadBarcodesParameters readBarcodeParameters)
        {
            // verify the required parameter 'readBarcodeParameters' is set
            if (readBarcodeParameters == null)
                throw new ApiException(400, "Missing required parameter 'readBarcodeParameters' when calling ImageApi->ReadBarcodes");

            var localVarPath = "/api/image/ReadBarcodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (readBarcodeParameters != null && readBarcodeParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(readBarcodeParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = readBarcodeParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadBarcodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReadBarcodesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReadBarcodesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReadBarcodesResponse)));
        }

        /// <summary>
        /// Saves a previously uploaded image as JPEG. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsJPEGParameters">An ImageSaveAsJPEGParameters object specifying the parameters of the action.</param>
        /// <returns>ImageSaveAsJPEGResponse</returns>
        public ImageSaveAsJPEGResponse SaveAsJPEG (ImageSaveAsJPEGParameters saveAsJPEGParameters)
        {
             ApiResponse<ImageSaveAsJPEGResponse> localVarResponse = SaveAsJPEGWithHttpInfo(saveAsJPEGParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Saves a previously uploaded image as JPEG. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsJPEGParameters">An ImageSaveAsJPEGParameters object specifying the parameters of the action.</param>
        /// <returns>ApiResponse of ImageSaveAsJPEGResponse</returns>
        public ApiResponse< ImageSaveAsJPEGResponse > SaveAsJPEGWithHttpInfo (ImageSaveAsJPEGParameters saveAsJPEGParameters)
        {
            // verify the required parameter 'saveAsJPEGParameters' is set
            if (saveAsJPEGParameters == null)
                throw new ApiException(400, "Missing required parameter 'saveAsJPEGParameters' when calling ImageApi->SaveAsJPEG");

            var localVarPath = "/api/image/SaveAsJPEG";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (saveAsJPEGParameters != null && saveAsJPEGParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saveAsJPEGParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveAsJPEGParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveAsJPEG", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageSaveAsJPEGResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageSaveAsJPEGResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageSaveAsJPEGResponse)));
        }

        /// <summary>
        /// Saves a previously uploaded image as JPEG. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsJPEGParameters">An ImageSaveAsJPEGParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ImageSaveAsJPEGResponse</returns>
        public async System.Threading.Tasks.Task<ImageSaveAsJPEGResponse> SaveAsJPEGAsync (ImageSaveAsJPEGParameters saveAsJPEGParameters)
        {
             ApiResponse<ImageSaveAsJPEGResponse> localVarResponse = await SaveAsJPEGAsyncWithHttpInfo(saveAsJPEGParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Saves a previously uploaded image as JPEG. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsJPEGParameters">An ImageSaveAsJPEGParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ApiResponse (ImageSaveAsJPEGResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageSaveAsJPEGResponse>> SaveAsJPEGAsyncWithHttpInfo (ImageSaveAsJPEGParameters saveAsJPEGParameters)
        {
            // verify the required parameter 'saveAsJPEGParameters' is set
            if (saveAsJPEGParameters == null)
                throw new ApiException(400, "Missing required parameter 'saveAsJPEGParameters' when calling ImageApi->SaveAsJPEG");

            var localVarPath = "/api/image/SaveAsJPEG";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (saveAsJPEGParameters != null && saveAsJPEGParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saveAsJPEGParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveAsJPEGParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveAsJPEG", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageSaveAsJPEGResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageSaveAsJPEGResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageSaveAsJPEGResponse)));
        }

        /// <summary>
        /// Saves a previously uploaded image as PNG. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsPNGParameters">An ImageSaveAsPNGParameters object specifying the parameters of the action.</param>
        /// <returns>ImageSaveAsPNGResponse</returns>
        public ImageSaveAsPNGResponse SaveAsPNG (ImageSaveAsPNGParameters saveAsPNGParameters)
        {
             ApiResponse<ImageSaveAsPNGResponse> localVarResponse = SaveAsPNGWithHttpInfo(saveAsPNGParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Saves a previously uploaded image as PNG. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsPNGParameters">An ImageSaveAsPNGParameters object specifying the parameters of the action.</param>
        /// <returns>ApiResponse of ImageSaveAsPNGResponse</returns>
        public ApiResponse< ImageSaveAsPNGResponse > SaveAsPNGWithHttpInfo (ImageSaveAsPNGParameters saveAsPNGParameters)
        {
            // verify the required parameter 'saveAsPNGParameters' is set
            if (saveAsPNGParameters == null)
                throw new ApiException(400, "Missing required parameter 'saveAsPNGParameters' when calling ImageApi->SaveAsPNG");

            var localVarPath = "/api/image/SaveAsPNG";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (saveAsPNGParameters != null && saveAsPNGParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saveAsPNGParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveAsPNGParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveAsPNG", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageSaveAsPNGResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageSaveAsPNGResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageSaveAsPNGResponse)));
        }

        /// <summary>
        /// Saves a previously uploaded image as PNG. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsPNGParameters">An ImageSaveAsPNGParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ImageSaveAsPNGResponse</returns>
        public async System.Threading.Tasks.Task<ImageSaveAsPNGResponse> SaveAsPNGAsync (ImageSaveAsPNGParameters saveAsPNGParameters)
        {
             ApiResponse<ImageSaveAsPNGResponse> localVarResponse = await SaveAsPNGAsyncWithHttpInfo(saveAsPNGParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Saves a previously uploaded image as PNG. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsPNGParameters">An ImageSaveAsPNGParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ApiResponse (ImageSaveAsPNGResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageSaveAsPNGResponse>> SaveAsPNGAsyncWithHttpInfo (ImageSaveAsPNGParameters saveAsPNGParameters)
        {
            // verify the required parameter 'saveAsPNGParameters' is set
            if (saveAsPNGParameters == null)
                throw new ApiException(400, "Missing required parameter 'saveAsPNGParameters' when calling ImageApi->SaveAsPNG");

            var localVarPath = "/api/image/SaveAsPNG";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (saveAsPNGParameters != null && saveAsPNGParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saveAsPNGParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveAsPNGParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveAsPNG", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageSaveAsPNGResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageSaveAsPNGResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageSaveAsPNGResponse)));
        }

        /// <summary>
        /// Saves a previously uploaded image as TIFF. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsTIFFParameters">An ImageSaveAsTIFFParameters object specifying the parameters of the action.</param>
        /// <returns>ImageSaveAsTIFFResponse</returns>
        public ImageSaveAsTIFFResponse SaveAsTIFF (ImageSaveAsTIFFParameters saveAsTIFFParameters)
        {
             ApiResponse<ImageSaveAsTIFFResponse> localVarResponse = SaveAsTIFFWithHttpInfo(saveAsTIFFParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Saves a previously uploaded image as TIFF. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsTIFFParameters">An ImageSaveAsTIFFParameters object specifying the parameters of the action.</param>
        /// <returns>ApiResponse of ImageSaveAsTIFFResponse</returns>
        public ApiResponse< ImageSaveAsTIFFResponse > SaveAsTIFFWithHttpInfo (ImageSaveAsTIFFParameters saveAsTIFFParameters)
        {
            // verify the required parameter 'saveAsTIFFParameters' is set
            if (saveAsTIFFParameters == null)
                throw new ApiException(400, "Missing required parameter 'saveAsTIFFParameters' when calling ImageApi->SaveAsTIFF");

            var localVarPath = "/api/image/SaveAsTIFF";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (saveAsTIFFParameters != null && saveAsTIFFParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saveAsTIFFParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveAsTIFFParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveAsTIFF", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageSaveAsTIFFResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageSaveAsTIFFResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageSaveAsTIFFResponse)));
        }

        /// <summary>
        /// Saves a previously uploaded image as TIFF. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsTIFFParameters">An ImageSaveAsTIFFParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ImageSaveAsTIFFResponse</returns>
        public async System.Threading.Tasks.Task<ImageSaveAsTIFFResponse> SaveAsTIFFAsync (ImageSaveAsTIFFParameters saveAsTIFFParameters)
        {
             ApiResponse<ImageSaveAsTIFFResponse> localVarResponse = await SaveAsTIFFAsyncWithHttpInfo(saveAsTIFFParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Saves a previously uploaded image as TIFF. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveAsTIFFParameters">An ImageSaveAsTIFFParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ApiResponse (ImageSaveAsTIFFResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageSaveAsTIFFResponse>> SaveAsTIFFAsyncWithHttpInfo (ImageSaveAsTIFFParameters saveAsTIFFParameters)
        {
            // verify the required parameter 'saveAsTIFFParameters' is set
            if (saveAsTIFFParameters == null)
                throw new ApiException(400, "Missing required parameter 'saveAsTIFFParameters' when calling ImageApi->SaveAsTIFF");

            var localVarPath = "/api/image/SaveAsTIFF";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (saveAsTIFFParameters != null && saveAsTIFFParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saveAsTIFFParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveAsTIFFParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveAsTIFF", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageSaveAsTIFFResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageSaveAsTIFFResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageSaveAsTIFFResponse)));
        }

    }
}
