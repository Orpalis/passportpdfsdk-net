/* 
 * PassportPDF
 *
 * Copyright Â© 2018 ORPALIS - http://www.orpalis.com
 *
 * OpenAPI spec version: v1
 * Contact: contact@orpalis.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PassportPDF.Client;
using PassportPDF.Model;

namespace PassportPDF.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Closes a previously uploaded image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeParameters">An ImageCloseParameters object specifying the parameters of the action. (optional)</param>
        /// <returns>ImageCloseResponse</returns>
        ImageCloseResponse CloseImage (ImageCloseParameters closeParameters = null);

        /// <summary>
        /// Closes a previously uploaded image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeParameters">An ImageCloseParameters object specifying the parameters of the action. (optional)</param>
        /// <returns>ApiResponse of ImageCloseResponse</returns>
        ApiResponse<ImageCloseResponse> CloseImageWithHttpInfo (ImageCloseParameters closeParameters = null);
        /// <summary>
        /// Gets the supported file extensions by the image loading actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>StringArrayResponse</returns>
        StringArrayResponse GetSupportedFileExtensions ();

        /// <summary>
        /// Gets the supported file extensions by the image loading actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StringArrayResponse</returns>
        ApiResponse<StringArrayResponse> GetSupportedFileExtensionsWithHttpInfo ();
        /// <summary>
        /// Loads the provided image.  Supported image formats can be retrieved by the GetSupportedFileExtensions action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadImageParameters">A LoadImageFromByteArrayParameters object specifying the parameters of the action.</param>
        /// <returns>LoadImageResponse</returns>
        LoadImageResponse LoadImage (LoadImageFromByteArrayParameters loadImageParameters);

        /// <summary>
        /// Loads the provided image.  Supported image formats can be retrieved by the GetSupportedFileExtensions action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadImageParameters">A LoadImageFromByteArrayParameters object specifying the parameters of the action.</param>
        /// <returns>ApiResponse of LoadImageResponse</returns>
        ApiResponse<LoadImageResponse> LoadImageWithHttpInfo (LoadImageFromByteArrayParameters loadImageParameters);
        /// <summary>
        /// Loads the provided image using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedFileExtensions action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LoadImageResponse</returns>
        LoadImageResponse LoadImageMultipart ();

        /// <summary>
        /// Loads the provided image using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedFileExtensions action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LoadImageResponse</returns>
        ApiResponse<LoadImageResponse> LoadImageMultipartWithHttpInfo ();
        /// <summary>
        /// Reads barcodes from a previously uploaded image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBarcodeParameters">An ImageReadBarcodeParameters object specifying the parameters of the action.</param>
        /// <returns>ImageReadBarcodeResponse</returns>
        ImageReadBarcodeResponse ReadBarcode (ImageReadBarcodeParameters readBarcodeParameters);

        /// <summary>
        /// Reads barcodes from a previously uploaded image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBarcodeParameters">An ImageReadBarcodeParameters object specifying the parameters of the action.</param>
        /// <returns>ApiResponse of ImageReadBarcodeResponse</returns>
        ApiResponse<ImageReadBarcodeResponse> ReadBarcodeWithHttpInfo (ImageReadBarcodeParameters readBarcodeParameters);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Closes a previously uploaded image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeParameters">An ImageCloseParameters object specifying the parameters of the action. (optional)</param>
        /// <returns>Task of ImageCloseResponse</returns>
        System.Threading.Tasks.Task<ImageCloseResponse> CloseImageAsync (ImageCloseParameters closeParameters = null);

        /// <summary>
        /// Closes a previously uploaded image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeParameters">An ImageCloseParameters object specifying the parameters of the action. (optional)</param>
        /// <returns>Task of ApiResponse (ImageCloseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageCloseResponse>> CloseImageAsyncWithHttpInfo (ImageCloseParameters closeParameters = null);
        /// <summary>
        /// Gets the supported file extensions by the image loading actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StringArrayResponse</returns>
        System.Threading.Tasks.Task<StringArrayResponse> GetSupportedFileExtensionsAsync ();

        /// <summary>
        /// Gets the supported file extensions by the image loading actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StringArrayResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringArrayResponse>> GetSupportedFileExtensionsAsyncWithHttpInfo ();
        /// <summary>
        /// Loads the provided image.  Supported image formats can be retrieved by the GetSupportedFileExtensions action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadImageParameters">A LoadImageFromByteArrayParameters object specifying the parameters of the action.</param>
        /// <returns>Task of LoadImageResponse</returns>
        System.Threading.Tasks.Task<LoadImageResponse> LoadImageAsync (LoadImageFromByteArrayParameters loadImageParameters);

        /// <summary>
        /// Loads the provided image.  Supported image formats can be retrieved by the GetSupportedFileExtensions action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadImageParameters">A LoadImageFromByteArrayParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ApiResponse (LoadImageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoadImageResponse>> LoadImageAsyncWithHttpInfo (LoadImageFromByteArrayParameters loadImageParameters);
        /// <summary>
        /// Loads the provided image using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedFileExtensions action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LoadImageResponse</returns>
        System.Threading.Tasks.Task<LoadImageResponse> LoadImageMultipartAsync ();

        /// <summary>
        /// Loads the provided image using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedFileExtensions action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LoadImageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoadImageResponse>> LoadImageMultipartAsyncWithHttpInfo ();
        /// <summary>
        /// Reads barcodes from a previously uploaded image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBarcodeParameters">An ImageReadBarcodeParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ImageReadBarcodeResponse</returns>
        System.Threading.Tasks.Task<ImageReadBarcodeResponse> ReadBarcodeAsync (ImageReadBarcodeParameters readBarcodeParameters);

        /// <summary>
        /// Reads barcodes from a previously uploaded image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBarcodeParameters">An ImageReadBarcodeParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ApiResponse (ImageReadBarcodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageReadBarcodeResponse>> ReadBarcodeAsyncWithHttpInfo (ImageReadBarcodeParameters readBarcodeParameters);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ImageApi : IImageApi
    {
        private PassportPDF.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ImageApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = PassportPDF.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ImageApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PassportPDF.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PassportPDF.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Closes a previously uploaded image. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeParameters">An ImageCloseParameters object specifying the parameters of the action. (optional)</param>
        /// <returns>ImageCloseResponse</returns>
        public ImageCloseResponse CloseImage (ImageCloseParameters closeParameters = null)
        {
             ApiResponse<ImageCloseResponse> localVarResponse = CloseImageWithHttpInfo(closeParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Closes a previously uploaded image. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeParameters">An ImageCloseParameters object specifying the parameters of the action. (optional)</param>
        /// <returns>ApiResponse of ImageCloseResponse</returns>
        public ApiResponse< ImageCloseResponse > CloseImageWithHttpInfo (ImageCloseParameters closeParameters = null)
        {

            var localVarPath = "/api/image/CloseImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeParameters != null && closeParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(closeParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageCloseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageCloseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageCloseResponse)));
        }

        /// <summary>
        /// Closes a previously uploaded image. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeParameters">An ImageCloseParameters object specifying the parameters of the action. (optional)</param>
        /// <returns>Task of ImageCloseResponse</returns>
        public async System.Threading.Tasks.Task<ImageCloseResponse> CloseImageAsync (ImageCloseParameters closeParameters = null)
        {
             ApiResponse<ImageCloseResponse> localVarResponse = await CloseImageAsyncWithHttpInfo(closeParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Closes a previously uploaded image. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeParameters">An ImageCloseParameters object specifying the parameters of the action. (optional)</param>
        /// <returns>Task of ApiResponse (ImageCloseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageCloseResponse>> CloseImageAsyncWithHttpInfo (ImageCloseParameters closeParameters = null)
        {

            var localVarPath = "/api/image/CloseImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeParameters != null && closeParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(closeParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageCloseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageCloseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageCloseResponse)));
        }

        /// <summary>
        /// Gets the supported file extensions by the image loading actions. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>StringArrayResponse</returns>
        public StringArrayResponse GetSupportedFileExtensions ()
        {
             ApiResponse<StringArrayResponse> localVarResponse = GetSupportedFileExtensionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the supported file extensions by the image loading actions. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StringArrayResponse</returns>
        public ApiResponse< StringArrayResponse > GetSupportedFileExtensionsWithHttpInfo ()
        {

            var localVarPath = "/api/image/GetSupportedFileExtensions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupportedFileExtensions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringArrayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringArrayResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringArrayResponse)));
        }

        /// <summary>
        /// Gets the supported file extensions by the image loading actions. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StringArrayResponse</returns>
        public async System.Threading.Tasks.Task<StringArrayResponse> GetSupportedFileExtensionsAsync ()
        {
             ApiResponse<StringArrayResponse> localVarResponse = await GetSupportedFileExtensionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the supported file extensions by the image loading actions. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StringArrayResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringArrayResponse>> GetSupportedFileExtensionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/image/GetSupportedFileExtensions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupportedFileExtensions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringArrayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringArrayResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringArrayResponse)));
        }

        /// <summary>
        /// Loads the provided image.  Supported image formats can be retrieved by the GetSupportedFileExtensions action. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadImageParameters">A LoadImageFromByteArrayParameters object specifying the parameters of the action.</param>
        /// <returns>LoadImageResponse</returns>
        public LoadImageResponse LoadImage (LoadImageFromByteArrayParameters loadImageParameters)
        {
             ApiResponse<LoadImageResponse> localVarResponse = LoadImageWithHttpInfo(loadImageParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Loads the provided image.  Supported image formats can be retrieved by the GetSupportedFileExtensions action. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadImageParameters">A LoadImageFromByteArrayParameters object specifying the parameters of the action.</param>
        /// <returns>ApiResponse of LoadImageResponse</returns>
        public ApiResponse< LoadImageResponse > LoadImageWithHttpInfo (LoadImageFromByteArrayParameters loadImageParameters)
        {
            // verify the required parameter 'loadImageParameters' is set
            if (loadImageParameters == null)
                throw new ApiException(400, "Missing required parameter 'loadImageParameters' when calling ImageApi->LoadImage");

            var localVarPath = "/api/image/LoadImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadImageParameters != null && loadImageParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(loadImageParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loadImageParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoadImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoadImageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LoadImageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoadImageResponse)));
        }

        /// <summary>
        /// Loads the provided image.  Supported image formats can be retrieved by the GetSupportedFileExtensions action. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadImageParameters">A LoadImageFromByteArrayParameters object specifying the parameters of the action.</param>
        /// <returns>Task of LoadImageResponse</returns>
        public async System.Threading.Tasks.Task<LoadImageResponse> LoadImageAsync (LoadImageFromByteArrayParameters loadImageParameters)
        {
             ApiResponse<LoadImageResponse> localVarResponse = await LoadImageAsyncWithHttpInfo(loadImageParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Loads the provided image.  Supported image formats can be retrieved by the GetSupportedFileExtensions action. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadImageParameters">A LoadImageFromByteArrayParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ApiResponse (LoadImageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoadImageResponse>> LoadImageAsyncWithHttpInfo (LoadImageFromByteArrayParameters loadImageParameters)
        {
            // verify the required parameter 'loadImageParameters' is set
            if (loadImageParameters == null)
                throw new ApiException(400, "Missing required parameter 'loadImageParameters' when calling ImageApi->LoadImage");

            var localVarPath = "/api/image/LoadImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadImageParameters != null && loadImageParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(loadImageParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loadImageParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoadImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoadImageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LoadImageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoadImageResponse)));
        }

        /// <summary>
        /// Loads the provided image using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedFileExtensions action. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LoadImageResponse</returns>
        public LoadImageResponse LoadImageMultipart ()
        {
             ApiResponse<LoadImageResponse> localVarResponse = LoadImageMultipartWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Loads the provided image using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedFileExtensions action. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LoadImageResponse</returns>
        public ApiResponse< LoadImageResponse > LoadImageMultipartWithHttpInfo ()
        {

            var localVarPath = "/api/image/LoadImageMultipart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoadImageMultipart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoadImageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LoadImageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoadImageResponse)));
        }

        /// <summary>
        /// Loads the provided image using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedFileExtensions action. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LoadImageResponse</returns>
        public async System.Threading.Tasks.Task<LoadImageResponse> LoadImageMultipartAsync ()
        {
             ApiResponse<LoadImageResponse> localVarResponse = await LoadImageMultipartAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Loads the provided image using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedFileExtensions action. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LoadImageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoadImageResponse>> LoadImageMultipartAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/image/LoadImageMultipart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoadImageMultipart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoadImageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LoadImageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoadImageResponse)));
        }

        /// <summary>
        /// Reads barcodes from a previously uploaded image. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBarcodeParameters">An ImageReadBarcodeParameters object specifying the parameters of the action.</param>
        /// <returns>ImageReadBarcodeResponse</returns>
        public ImageReadBarcodeResponse ReadBarcode (ImageReadBarcodeParameters readBarcodeParameters)
        {
             ApiResponse<ImageReadBarcodeResponse> localVarResponse = ReadBarcodeWithHttpInfo(readBarcodeParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reads barcodes from a previously uploaded image. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBarcodeParameters">An ImageReadBarcodeParameters object specifying the parameters of the action.</param>
        /// <returns>ApiResponse of ImageReadBarcodeResponse</returns>
        public ApiResponse< ImageReadBarcodeResponse > ReadBarcodeWithHttpInfo (ImageReadBarcodeParameters readBarcodeParameters)
        {
            // verify the required parameter 'readBarcodeParameters' is set
            if (readBarcodeParameters == null)
                throw new ApiException(400, "Missing required parameter 'readBarcodeParameters' when calling ImageApi->ReadBarcode");

            var localVarPath = "/api/image/ReadBarcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (readBarcodeParameters != null && readBarcodeParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(readBarcodeParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = readBarcodeParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageReadBarcodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageReadBarcodeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageReadBarcodeResponse)));
        }

        /// <summary>
        /// Reads barcodes from a previously uploaded image. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBarcodeParameters">An ImageReadBarcodeParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ImageReadBarcodeResponse</returns>
        public async System.Threading.Tasks.Task<ImageReadBarcodeResponse> ReadBarcodeAsync (ImageReadBarcodeParameters readBarcodeParameters)
        {
             ApiResponse<ImageReadBarcodeResponse> localVarResponse = await ReadBarcodeAsyncWithHttpInfo(readBarcodeParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reads barcodes from a previously uploaded image. 
        /// </summary>
        /// <exception cref="PassportPDF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBarcodeParameters">An ImageReadBarcodeParameters object specifying the parameters of the action.</param>
        /// <returns>Task of ApiResponse (ImageReadBarcodeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageReadBarcodeResponse>> ReadBarcodeAsyncWithHttpInfo (ImageReadBarcodeParameters readBarcodeParameters)
        {
            // verify the required parameter 'readBarcodeParameters' is set
            if (readBarcodeParameters == null)
                throw new ApiException(400, "Missing required parameter 'readBarcodeParameters' when calling ImageApi->ReadBarcode");

            var localVarPath = "/api/image/ReadBarcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (readBarcodeParameters != null && readBarcodeParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(readBarcodeParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = readBarcodeParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageReadBarcodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageReadBarcodeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageReadBarcodeResponse)));
        }

    }
}
