/* 
 * PassportPDF
 *
 * Copyright Â© 2018 ORPALIS - http://www.orpalis.com
 *
 * OpenAPI spec version: v1
 * Contact: contact@orpalis.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PassportPDF.Client.SwaggerDateConverter;

namespace PassportPDF.Model
{
    /// <summary>
    /// Represents the parameters for text content based on a PDF standard font.
    /// </summary>
    [DataContract]
    public partial class PdfStandardFontAlignedTextParameters :  IEquatable<PdfStandardFontAlignedTextParameters>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Font
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FontEnum
        {
            
            /// <summary>
            /// Enum PdfStandardFontCourier for "PdfStandardFontCourier"
            /// </summary>
            [EnumMember(Value = "PdfStandardFontCourier")]
            PdfStandardFontCourier = 1,
            
            /// <summary>
            /// Enum PdfStandardFontCourierOblique for "PdfStandardFontCourierOblique"
            /// </summary>
            [EnumMember(Value = "PdfStandardFontCourierOblique")]
            PdfStandardFontCourierOblique = 2,
            
            /// <summary>
            /// Enum PdfStandardFontCourierBold for "PdfStandardFontCourierBold"
            /// </summary>
            [EnumMember(Value = "PdfStandardFontCourierBold")]
            PdfStandardFontCourierBold = 3,
            
            /// <summary>
            /// Enum PdfStandardFontCourierBoldOblique for "PdfStandardFontCourierBoldOblique"
            /// </summary>
            [EnumMember(Value = "PdfStandardFontCourierBoldOblique")]
            PdfStandardFontCourierBoldOblique = 4,
            
            /// <summary>
            /// Enum PdfStandardFontHelvetica for "PdfStandardFontHelvetica"
            /// </summary>
            [EnumMember(Value = "PdfStandardFontHelvetica")]
            PdfStandardFontHelvetica = 5,
            
            /// <summary>
            /// Enum PdfStandardFontHelveticaOblique for "PdfStandardFontHelveticaOblique"
            /// </summary>
            [EnumMember(Value = "PdfStandardFontHelveticaOblique")]
            PdfStandardFontHelveticaOblique = 6,
            
            /// <summary>
            /// Enum PdfStandardFontHelveticaBold for "PdfStandardFontHelveticaBold"
            /// </summary>
            [EnumMember(Value = "PdfStandardFontHelveticaBold")]
            PdfStandardFontHelveticaBold = 7,
            
            /// <summary>
            /// Enum PdfStandardFontHelveticaBoldOblique for "PdfStandardFontHelveticaBoldOblique"
            /// </summary>
            [EnumMember(Value = "PdfStandardFontHelveticaBoldOblique")]
            PdfStandardFontHelveticaBoldOblique = 8,
            
            /// <summary>
            /// Enum PdfStandardFontTimesRoman for "PdfStandardFontTimesRoman"
            /// </summary>
            [EnumMember(Value = "PdfStandardFontTimesRoman")]
            PdfStandardFontTimesRoman = 9,
            
            /// <summary>
            /// Enum PdfStandardFontTimesItalic for "PdfStandardFontTimesItalic"
            /// </summary>
            [EnumMember(Value = "PdfStandardFontTimesItalic")]
            PdfStandardFontTimesItalic = 10,
            
            /// <summary>
            /// Enum PdfStandardFontTimesBold for "PdfStandardFontTimesBold"
            /// </summary>
            [EnumMember(Value = "PdfStandardFontTimesBold")]
            PdfStandardFontTimesBold = 11,
            
            /// <summary>
            /// Enum PdfStandardFontTimesBoldItalic for "PdfStandardFontTimesBoldItalic"
            /// </summary>
            [EnumMember(Value = "PdfStandardFontTimesBoldItalic")]
            PdfStandardFontTimesBoldItalic = 12,
            
            /// <summary>
            /// Enum PdfStandardFontSymbol for "PdfStandardFontSymbol"
            /// </summary>
            [EnumMember(Value = "PdfStandardFontSymbol")]
            PdfStandardFontSymbol = 13,
            
            /// <summary>
            /// Enum PdfStandardFontZapfDingbats for "PdfStandardFontZapfDingbats"
            /// </summary>
            [EnumMember(Value = "PdfStandardFontZapfDingbats")]
            PdfStandardFontZapfDingbats = 14
        }

        /// <summary>
        /// Gets or Sets Font
        /// </summary>
        [DataMember(Name="font", EmitDefaultValue=false)]
        public FontEnum? Font { get; set; }
        /// <summary>
        /// Gets or Sets TextVerticalAlignment
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TextVerticalAlignmentEnum
        {
            
            /// <summary>
            /// Enum TextAlignmentNear for "TextAlignmentNear"
            /// </summary>
            [EnumMember(Value = "TextAlignmentNear")]
            TextAlignmentNear = 1,
            
            /// <summary>
            /// Enum TextAlignmentCenter for "TextAlignmentCenter"
            /// </summary>
            [EnumMember(Value = "TextAlignmentCenter")]
            TextAlignmentCenter = 2,
            
            /// <summary>
            /// Enum TextAlignmentFar for "TextAlignmentFar"
            /// </summary>
            [EnumMember(Value = "TextAlignmentFar")]
            TextAlignmentFar = 3
        }

        /// <summary>
        /// Gets or Sets TextVerticalAlignment
        /// </summary>
        [DataMember(Name="textVerticalAlignment", EmitDefaultValue=false)]
        public TextVerticalAlignmentEnum? TextVerticalAlignment { get; set; }
        /// <summary>
        /// Gets or Sets TextHorizontalAlignment
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TextHorizontalAlignmentEnum
        {
            
            /// <summary>
            /// Enum TextAlignmentNear for "TextAlignmentNear"
            /// </summary>
            [EnumMember(Value = "TextAlignmentNear")]
            TextAlignmentNear = 1,
            
            /// <summary>
            /// Enum TextAlignmentCenter for "TextAlignmentCenter"
            /// </summary>
            [EnumMember(Value = "TextAlignmentCenter")]
            TextAlignmentCenter = 2,
            
            /// <summary>
            /// Enum TextAlignmentFar for "TextAlignmentFar"
            /// </summary>
            [EnumMember(Value = "TextAlignmentFar")]
            TextAlignmentFar = 3
        }

        /// <summary>
        /// Gets or Sets TextHorizontalAlignment
        /// </summary>
        [DataMember(Name="textHorizontalAlignment", EmitDefaultValue=false)]
        public TextHorizontalAlignmentEnum? TextHorizontalAlignment { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PdfStandardFontAlignedTextParameters" /> class.
        /// </summary>
        /// <param name="Text">Text.</param>
        /// <param name="TextColor">TextColor.</param>
        /// <param name="Font">Font.</param>
        /// <param name="FontSize">FontSize.</param>
        /// <param name="TextVerticalAlignment">TextVerticalAlignment.</param>
        /// <param name="TextHorizontalAlignment">TextHorizontalAlignment.</param>
        public PdfStandardFontAlignedTextParameters(string Text = default(string), string TextColor = default(string), FontEnum? Font = default(FontEnum?), int? FontSize = default(int?), TextVerticalAlignmentEnum? TextVerticalAlignment = default(TextVerticalAlignmentEnum?), TextHorizontalAlignmentEnum? TextHorizontalAlignment = default(TextHorizontalAlignmentEnum?))
        {
            this.Text = Text;
            this.TextColor = TextColor;
            this.Font = Font;
            this.FontSize = FontSize;
            this.TextVerticalAlignment = TextVerticalAlignment;
            this.TextHorizontalAlignment = TextHorizontalAlignment;
        }
        
        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets TextColor
        /// </summary>
        [DataMember(Name="textColor", EmitDefaultValue=false)]
        public string TextColor { get; set; }


        /// <summary>
        /// Gets or Sets FontSize
        /// </summary>
        [DataMember(Name="fontSize", EmitDefaultValue=false)]
        public int? FontSize { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PdfStandardFontAlignedTextParameters {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  TextColor: ").Append(TextColor).Append("\n");
            sb.Append("  Font: ").Append(Font).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("  TextVerticalAlignment: ").Append(TextVerticalAlignment).Append("\n");
            sb.Append("  TextHorizontalAlignment: ").Append(TextHorizontalAlignment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PdfStandardFontAlignedTextParameters);
        }

        /// <summary>
        /// Returns true if PdfStandardFontAlignedTextParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of PdfStandardFontAlignedTextParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PdfStandardFontAlignedTextParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.TextColor == input.TextColor ||
                    (this.TextColor != null &&
                    this.TextColor.Equals(input.TextColor))
                ) && 
                (
                    this.Font == input.Font ||
                    (this.Font != null &&
                    this.Font.Equals(input.Font))
                ) && 
                (
                    this.FontSize == input.FontSize ||
                    (this.FontSize != null &&
                    this.FontSize.Equals(input.FontSize))
                ) && 
                (
                    this.TextVerticalAlignment == input.TextVerticalAlignment ||
                    (this.TextVerticalAlignment != null &&
                    this.TextVerticalAlignment.Equals(input.TextVerticalAlignment))
                ) && 
                (
                    this.TextHorizontalAlignment == input.TextHorizontalAlignment ||
                    (this.TextHorizontalAlignment != null &&
                    this.TextHorizontalAlignment.Equals(input.TextHorizontalAlignment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.TextColor != null)
                    hashCode = hashCode * 59 + this.TextColor.GetHashCode();
                if (this.Font != null)
                    hashCode = hashCode * 59 + this.Font.GetHashCode();
                if (this.FontSize != null)
                    hashCode = hashCode * 59 + this.FontSize.GetHashCode();
                if (this.TextVerticalAlignment != null)
                    hashCode = hashCode * 59 + this.TextVerticalAlignment.GetHashCode();
                if (this.TextHorizontalAlignment != null)
                    hashCode = hashCode * 59 + this.TextHorizontalAlignment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
