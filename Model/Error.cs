/* 
 * PassportPDF
 *
 * Copyright Â© 2018 ORPALIS - http://www.orpalis.com
 *
 * OpenAPI spec version: v1
 * Contact: contact@orpalis.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PassportPDF.Client.SwaggerDateConverter;

namespace PassportPDF.Model
{
    /// <summary>
    /// Contains all the information related to an error which has occured.
    /// </summary>
    [DataContract]
    public partial class Error :  IEquatable<Error>, IValidatableObject
    {
        /// <summary>
        /// Specifies the last result status provided by the PassportPDF API.
        /// </summary>
        /// <value>Specifies the last result status provided by the PassportPDF API.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResultcodeEnum
        {
            
            /// <summary>
            /// Enum OK for "OK"
            /// </summary>
            [EnumMember(Value = "OK")]
            OK = 1,
            
            /// <summary>
            /// Enum ActionTimedOut for "ActionTimedOut"
            /// </summary>
            [EnumMember(Value = "ActionTimedOut")]
            ActionTimedOut = 2,
            
            /// <summary>
            /// Enum EmptyParameter for "EmptyParameter"
            /// </summary>
            [EnumMember(Value = "EmptyParameter")]
            EmptyParameter = 3,
            
            /// <summary>
            /// Enum InvalidAPIKey for "InvalidAPIKey"
            /// </summary>
            [EnumMember(Value = "InvalidAPIKey")]
            InvalidAPIKey = 4,
            
            /// <summary>
            /// Enum NotEnoughTokens for "NotEnoughTokens"
            /// </summary>
            [EnumMember(Value = "NotEnoughTokens")]
            NotEnoughTokens = 5,
            
            /// <summary>
            /// Enum GenericError for "GenericError"
            /// </summary>
            [EnumMember(Value = "GenericError")]
            GenericError = 6,
            
            /// <summary>
            /// Enum InvalidParameter for "InvalidParameter"
            /// </summary>
            [EnumMember(Value = "InvalidParameter")]
            InvalidParameter = 7,
            
            /// <summary>
            /// Enum InvalidColor for "InvalidColor"
            /// </summary>
            [EnumMember(Value = "InvalidColor")]
            InvalidColor = 8,
            
            /// <summary>
            /// Enum OutOfMemory for "OutOfMemory"
            /// </summary>
            [EnumMember(Value = "OutOfMemory")]
            OutOfMemory = 9,
            
            /// <summary>
            /// Enum NotImplemented for "NotImplemented"
            /// </summary>
            [EnumMember(Value = "NotImplemented")]
            NotImplemented = 10,
            
            /// <summary>
            /// Enum FileNotFound for "FileNotFound"
            /// </summary>
            [EnumMember(Value = "FileNotFound")]
            FileNotFound = 11,
            
            /// <summary>
            /// Enum AccessDenied for "AccessDenied"
            /// </summary>
            [EnumMember(Value = "AccessDenied")]
            AccessDenied = 12,
            
            /// <summary>
            /// Enum CanNotImportFileToPDF for "CanNotImportFileToPDF"
            /// </summary>
            [EnumMember(Value = "CanNotImportFileToPDF")]
            CanNotImportFileToPDF = 13,
            
            /// <summary>
            /// Enum PdfCanNotBeDecrypted for "PdfCanNotBeDecrypted"
            /// </summary>
            [EnumMember(Value = "PdfCanNotBeDecrypted")]
            PdfCanNotBeDecrypted = 14,
            
            /// <summary>
            /// Enum PdfOperationNotAllowed for "PdfOperationNotAllowed"
            /// </summary>
            [EnumMember(Value = "PdfOperationNotAllowed")]
            PdfOperationNotAllowed = 15,
            
            /// <summary>
            /// Enum PdfCanNotOpenFile for "PdfCanNotOpenFile"
            /// </summary>
            [EnumMember(Value = "PdfCanNotOpenFile")]
            PdfCanNotOpenFile = 16,
            
            /// <summary>
            /// Enum PdfCanNotSaveFile for "PdfCanNotSaveFile"
            /// </summary>
            [EnumMember(Value = "PdfCanNotSaveFile")]
            PdfCanNotSaveFile = 17,
            
            /// <summary>
            /// Enum CanNotCreateFile for "CanNotCreateFile"
            /// </summary>
            [EnumMember(Value = "CanNotCreateFile")]
            CanNotCreateFile = 18,
            
            /// <summary>
            /// Enum NoDocumentProvided for "NoDocumentProvided"
            /// </summary>
            [EnumMember(Value = "NoDocumentProvided")]
            NoDocumentProvided = 19,
            
            /// <summary>
            /// Enum CanNotRemovePage for "CanNotRemovePage"
            /// </summary>
            [EnumMember(Value = "CanNotRemovePage")]
            CanNotRemovePage = 20,
            
            /// <summary>
            /// Enum CanNotSwapPages for "CanNotSwapPages"
            /// </summary>
            [EnumMember(Value = "CanNotSwapPages")]
            CanNotSwapPages = 21,
            
            /// <summary>
            /// Enum CanNotMovePage for "CanNotMovePage"
            /// </summary>
            [EnumMember(Value = "CanNotMovePage")]
            CanNotMovePage = 22,
            
            /// <summary>
            /// Enum CanNotRotatePage for "CanNotRotatePage"
            /// </summary>
            [EnumMember(Value = "CanNotRotatePage")]
            CanNotRotatePage = 23,
            
            /// <summary>
            /// Enum CanNotFlipPage for "CanNotFlipPage"
            /// </summary>
            [EnumMember(Value = "CanNotFlipPage")]
            CanNotFlipPage = 24,
            
            /// <summary>
            /// Enum InvalidPageRange for "InvalidPageRange"
            /// </summary>
            [EnumMember(Value = "InvalidPageRange")]
            InvalidPageRange = 25,
            
            /// <summary>
            /// Enum CanNotReducePDF for "CanNotReducePDF"
            /// </summary>
            [EnumMember(Value = "CanNotReducePDF")]
            CanNotReducePDF = 26,
            
            /// <summary>
            /// Enum CanNotAutoDeskew for "CanNotAutoDeskew"
            /// </summary>
            [EnumMember(Value = "CanNotAutoDeskew")]
            CanNotAutoDeskew = 27,
            
            /// <summary>
            /// Enum CanNotSplit for "CanNotSplit"
            /// </summary>
            [EnumMember(Value = "CanNotSplit")]
            CanNotSplit = 28,
            
            /// <summary>
            /// Enum CanNotSaveAsJPEG for "CanNotSaveAsJPEG"
            /// </summary>
            [EnumMember(Value = "CanNotSaveAsJPEG")]
            CanNotSaveAsJPEG = 29,
            
            /// <summary>
            /// Enum CanNotDigiSign for "CanNotDigiSign"
            /// </summary>
            [EnumMember(Value = "CanNotDigiSign")]
            CanNotDigiSign = 30,
            
            /// <summary>
            /// Enum CanNotProtect for "CanNotProtect"
            /// </summary>
            [EnumMember(Value = "CanNotProtect")]
            CanNotProtect = 31,
            
            /// <summary>
            /// Enum CanNotConvertToPDFA for "CanNotConvertToPDFA"
            /// </summary>
            [EnumMember(Value = "CanNotConvertToPDFA")]
            CanNotConvertToPDFA = 32,
            
            /// <summary>
            /// Enum CanNotAnnotate for "CanNotAnnotate"
            /// </summary>
            [EnumMember(Value = "CanNotAnnotate")]
            CanNotAnnotate = 33,
            
            /// <summary>
            /// Enum CanNotClearPage for "CanNotClearPage"
            /// </summary>
            [EnumMember(Value = "CanNotClearPage")]
            CanNotClearPage = 34,
            
            /// <summary>
            /// Enum CanNotMerge for "CanNotMerge"
            /// </summary>
            [EnumMember(Value = "CanNotMerge")]
            CanNotMerge = 35,
            
            /// <summary>
            /// Enum CanNotGetPageThumbnail for "CanNotGetPageThumbnail"
            /// </summary>
            [EnumMember(Value = "CanNotGetPageThumbnail")]
            CanNotGetPageThumbnail = 36,
            
            /// <summary>
            /// Enum CanNotGetDocumentPreview for "CanNotGetDocumentPreview"
            /// </summary>
            [EnumMember(Value = "CanNotGetDocumentPreview")]
            CanNotGetDocumentPreview = 37,
            
            /// <summary>
            /// Enum CanNotRemovePageFormFields for "CanNotRemovePageFormFields"
            /// </summary>
            [EnumMember(Value = "CanNotRemovePageFormFields")]
            CanNotRemovePageFormFields = 38,
            
            /// <summary>
            /// Enum CanNotInsertImage for "CanNotInsertImage"
            /// </summary>
            [EnumMember(Value = "CanNotInsertImage")]
            CanNotInsertImage = 39,
            
            /// <summary>
            /// Enum CanNotDrawImage for "CanNotDrawImage"
            /// </summary>
            [EnumMember(Value = "CanNotDrawImage")]
            CanNotDrawImage = 40,
            
            /// <summary>
            /// Enum CanNotInsertPageNumber for "CanNotInsertPageNumber"
            /// </summary>
            [EnumMember(Value = "CanNotInsertPageNumber")]
            CanNotInsertPageNumber = 41,
            
            /// <summary>
            /// Enum CanNotInsertText for "CanNotInsertText"
            /// </summary>
            [EnumMember(Value = "CanNotInsertText")]
            CanNotInsertText = 42,
            
            /// <summary>
            /// Enum CanNotReadBarcode for "CanNotReadBarcode"
            /// </summary>
            [EnumMember(Value = "CanNotReadBarcode")]
            CanNotReadBarcode = 43,
            
            /// <summary>
            /// Enum CanNotFlattenFormFields for "CanNotFlattenFormFields"
            /// </summary>
            [EnumMember(Value = "CanNotFlattenFormFields")]
            CanNotFlattenFormFields = 44,
            
            /// <summary>
            /// Enum CanNotExportMoreThan2GigabyteFile for "CanNotExportMoreThan2GigabyteFile"
            /// </summary>
            [EnumMember(Value = "CanNotExportMoreThan2GigabyteFile")]
            CanNotExportMoreThan2GigabyteFile = 45,
            
            /// <summary>
            /// Enum CanNotOpenSession for "CanNotOpenSession"
            /// </summary>
            [EnumMember(Value = "CanNotOpenSession")]
            CanNotOpenSession = 46,
            
            /// <summary>
            /// Enum UnknownOrExpiredSession for "UnknownOrExpiredSession"
            /// </summary>
            [EnumMember(Value = "UnknownOrExpiredSession")]
            UnknownOrExpiredSession = 47,
            
            /// <summary>
            /// Enum CanNotSaveFile for "CanNotSaveFile"
            /// </summary>
            [EnumMember(Value = "CanNotSaveFile")]
            CanNotSaveFile = 48,
            
            /// <summary>
            /// Enum CanNotRepairPDF for "CanNotRepairPDF"
            /// </summary>
            [EnumMember(Value = "CanNotRepairPDF")]
            CanNotRepairPDF = 49,
            
            /// <summary>
            /// Enum UnsupportedImageFormat for "UnsupportedImageFormat"
            /// </summary>
            [EnumMember(Value = "UnsupportedImageFormat")]
            UnsupportedImageFormat = 50,
            
            /// <summary>
            /// Enum CanNotOCR for "CanNotOCR"
            /// </summary>
            [EnumMember(Value = "CanNotOCR")]
            CanNotOCR = 51,
            
            /// <summary>
            /// Enum CanNotOpenImage for "CanNotOpenImage"
            /// </summary>
            [EnumMember(Value = "CanNotOpenImage")]
            CanNotOpenImage = 52,
            
            /// <summary>
            /// Enum CanNotSaveAsPNG for "CanNotSaveAsPNG"
            /// </summary>
            [EnumMember(Value = "CanNotSaveAsPNG")]
            CanNotSaveAsPNG = 53,
            
            /// <summary>
            /// Enum CanNotSaveAsTIFF for "CanNotSaveAsTIFF"
            /// </summary>
            [EnumMember(Value = "CanNotSaveAsTIFF")]
            CanNotSaveAsTIFF = 54,
            
            /// <summary>
            /// Enum CanNotSaveAsTIFFMultipage for "CanNotSaveAsTIFFMultipage"
            /// </summary>
            [EnumMember(Value = "CanNotSaveAsTIFFMultipage")]
            CanNotSaveAsTIFFMultipage = 55,
            
            /// <summary>
            /// Enum CanNotSetInfo for "CanNotSetInfo"
            /// </summary>
            [EnumMember(Value = "CanNotSetInfo")]
            CanNotSetInfo = 56,
            
            /// <summary>
            /// Enum CanNotSetPageBox for "CanNotSetPageBox"
            /// </summary>
            [EnumMember(Value = "CanNotSetPageBox")]
            CanNotSetPageBox = 57,
            
            /// <summary>
            /// Enum CanNotExtractPage for "CanNotExtractPage"
            /// </summary>
            [EnumMember(Value = "CanNotExtractPage")]
            CanNotExtractPage = 58,
            
            /// <summary>
            /// Enum CanNotInsertNewPage for "CanNotInsertNewPage"
            /// </summary>
            [EnumMember(Value = "CanNotInsertNewPage")]
            CanNotInsertNewPage = 59,
            
            /// <summary>
            /// Enum CanNotClonePage for "CanNotClonePage"
            /// </summary>
            [EnumMember(Value = "CanNotClonePage")]
            CanNotClonePage = 60,
            
            /// <summary>
            /// Enum CanNotSetInitialView for "CanNotSetInitialView"
            /// </summary>
            [EnumMember(Value = "CanNotSetInitialView")]
            CanNotSetInitialView = 61,
            
            /// <summary>
            /// Enum CanNotAdjust for "CanNotAdjust"
            /// </summary>
            [EnumMember(Value = "CanNotAdjust")]
            CanNotAdjust = 62,
            
            /// <summary>
            /// Enum CanNotResize for "CanNotResize"
            /// </summary>
            [EnumMember(Value = "CanNotResize")]
            CanNotResize = 63,
            
            /// <summary>
            /// Enum CanNotFilter for "CanNotFilter"
            /// </summary>
            [EnumMember(Value = "CanNotFilter")]
            CanNotFilter = 64,
            
            /// <summary>
            /// Enum CanNotCleanupDocument for "CanNotCleanupDocument"
            /// </summary>
            [EnumMember(Value = "CanNotCleanupDocument")]
            CanNotCleanupDocument = 65,
            
            /// <summary>
            /// Enum UnknownDocumentFormat for "UnknownDocumentFormat"
            /// </summary>
            [EnumMember(Value = "UnknownDocumentFormat")]
            UnknownDocumentFormat = 66,
            
            /// <summary>
            /// Enum CanNotCrop for "CanNotCrop"
            /// </summary>
            [EnumMember(Value = "CanNotCrop")]
            CanNotCrop = 67,
            
            /// <summary>
            /// Enum CanNotRotate for "CanNotRotate"
            /// </summary>
            [EnumMember(Value = "CanNotRotate")]
            CanNotRotate = 68,
            
            /// <summary>
            /// Enum CanNotDetectColor for "CanNotDetectColor"
            /// </summary>
            [EnumMember(Value = "CanNotDetectColor")]
            CanNotDetectColor = 69,
            
            /// <summary>
            /// Enum CanNotConvertColorDepth for "CanNotConvertColorDepth"
            /// </summary>
            [EnumMember(Value = "CanNotConvertColorDepth")]
            CanNotConvertColorDepth = 70,
            
            /// <summary>
            /// Enum PdfCanNotAddFont for "PdfCanNotAddFont"
            /// </summary>
            [EnumMember(Value = "PdfCanNotAddFont")]
            PdfCanNotAddFont = 71,
            
            /// <summary>
            /// Enum ActionExecutionRejected for "ActionExecutionRejected"
            /// </summary>
            [EnumMember(Value = "ActionExecutionRejected")]
            ActionExecutionRejected = 72
        }

        /// <summary>
        /// Specifies the last result status provided by the PassportPDF API.
        /// </summary>
        /// <value>Specifies the last result status provided by the PassportPDF API.</value>
        [DataMember(Name="resultcode", EmitDefaultValue=false)]
        public ResultcodeEnum? Resultcode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Error" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Error()
        {
        }
        

        /// <summary>
        /// Specifies a result code related to an error which occured in an external component.
        /// </summary>
        /// <value>Specifies a result code related to an error which occured in an external component.</value>
        [DataMember(Name="extResultStatus", EmitDefaultValue=false)]
        public string ExtResultStatus { get; private set; }

        /// <summary>
        /// Specifies a message which further describes the error.
        /// </summary>
        /// <value>Specifies a message which further describes the error.</value>
        [DataMember(Name="extResultMessage", EmitDefaultValue=false)]
        public string ExtResultMessage { get; private set; }

        /// <summary>
        /// Specifies a unique identifier, allowing to easily assess the error.
        /// </summary>
        /// <value>Specifies a unique identifier, allowing to easily assess the error.</value>
        [DataMember(Name="internalErrorId", EmitDefaultValue=false)]
        public string InternalErrorId { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Error {\n");
            sb.Append("  Resultcode: ").Append(Resultcode).Append("\n");
            sb.Append("  ExtResultStatus: ").Append(ExtResultStatus).Append("\n");
            sb.Append("  ExtResultMessage: ").Append(ExtResultMessage).Append("\n");
            sb.Append("  InternalErrorId: ").Append(InternalErrorId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Error);
        }

        /// <summary>
        /// Returns true if Error instances are equal
        /// </summary>
        /// <param name="input">Instance of Error to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Error input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Resultcode == input.Resultcode ||
                    (this.Resultcode != null &&
                    this.Resultcode.Equals(input.Resultcode))
                ) && 
                (
                    this.ExtResultStatus == input.ExtResultStatus ||
                    (this.ExtResultStatus != null &&
                    this.ExtResultStatus.Equals(input.ExtResultStatus))
                ) && 
                (
                    this.ExtResultMessage == input.ExtResultMessage ||
                    (this.ExtResultMessage != null &&
                    this.ExtResultMessage.Equals(input.ExtResultMessage))
                ) && 
                (
                    this.InternalErrorId == input.InternalErrorId ||
                    (this.InternalErrorId != null &&
                    this.InternalErrorId.Equals(input.InternalErrorId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Resultcode != null)
                    hashCode = hashCode * 59 + this.Resultcode.GetHashCode();
                if (this.ExtResultStatus != null)
                    hashCode = hashCode * 59 + this.ExtResultStatus.GetHashCode();
                if (this.ExtResultMessage != null)
                    hashCode = hashCode * 59 + this.ExtResultMessage.GetHashCode();
                if (this.InternalErrorId != null)
                    hashCode = hashCode * 59 + this.InternalErrorId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
