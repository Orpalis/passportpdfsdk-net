/* 
 * PassportPDF
 *
 * Copyright Â© 2018 ORPALIS - http://www.orpalis.com
 *
 * OpenAPI spec version: v1
 * Contact: contact@orpalis.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PassportPDF.Client.SwaggerDateConverter;

namespace PassportPDF.Model
{
    /// <summary>
    /// Represents the parameters for an auto deskew action.
    /// </summary>
    [DataContract]
    public partial class PDFAutoDeskewParameters :  IEquatable<PDFAutoDeskewParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PDFAutoDeskewParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PDFAutoDeskewParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PDFAutoDeskewParameters" /> class.
        /// </summary>
        /// <param name="FileId">FileId (required).</param>
        /// <param name="PageRange">PageRange (default to &quot;1&quot;).</param>
        /// <param name="MaxAngleOfResearch">MaxAngleOfResearch (default to 15.0F).</param>
        /// <param name="AngleStep">AngleStep (default to 0.25F).</param>
        /// <param name="Optimistic">Optimistic (default to false).</param>
        public PDFAutoDeskewParameters(string FileId = default(string), string PageRange = "1", float? MaxAngleOfResearch = 15.0F, float? AngleStep = 0.25F, bool? Optimistic = false)
        {
            // to ensure "FileId" is required (not null)
            if (FileId == null)
            {
                throw new InvalidDataException("FileId is a required property for PDFAutoDeskewParameters and cannot be null");
            }
            else
            {
                this.FileId = FileId;
            }
            // use default value if no "PageRange" provided
            if (PageRange == null)
            {
                this.PageRange = "1";
            }
            else
            {
                this.PageRange = PageRange;
            }
            // use default value if no "MaxAngleOfResearch" provided
            if (MaxAngleOfResearch == null)
            {
                this.MaxAngleOfResearch = 15.0F;
            }
            else
            {
                this.MaxAngleOfResearch = MaxAngleOfResearch;
            }
            // use default value if no "AngleStep" provided
            if (AngleStep == null)
            {
                this.AngleStep = 0.25F;
            }
            else
            {
                this.AngleStep = AngleStep;
            }
            // use default value if no "Optimistic" provided
            if (Optimistic == null)
            {
                this.Optimistic = false;
            }
            else
            {
                this.Optimistic = Optimistic;
            }
        }
        
        /// <summary>
        /// Gets or Sets FileId
        /// </summary>
        [DataMember(Name="fileId", EmitDefaultValue=false)]
        public string FileId { get; set; }

        /// <summary>
        /// Gets or Sets PageRange
        /// </summary>
        [DataMember(Name="pageRange", EmitDefaultValue=false)]
        public string PageRange { get; set; }

        /// <summary>
        /// Gets or Sets MaxAngleOfResearch
        /// </summary>
        [DataMember(Name="maxAngleOfResearch", EmitDefaultValue=false)]
        public float? MaxAngleOfResearch { get; set; }

        /// <summary>
        /// Gets or Sets AngleStep
        /// </summary>
        [DataMember(Name="angleStep", EmitDefaultValue=false)]
        public float? AngleStep { get; set; }

        /// <summary>
        /// Gets or Sets Optimistic
        /// </summary>
        [DataMember(Name="optimistic", EmitDefaultValue=false)]
        public bool? Optimistic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PDFAutoDeskewParameters {\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  PageRange: ").Append(PageRange).Append("\n");
            sb.Append("  MaxAngleOfResearch: ").Append(MaxAngleOfResearch).Append("\n");
            sb.Append("  AngleStep: ").Append(AngleStep).Append("\n");
            sb.Append("  Optimistic: ").Append(Optimistic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PDFAutoDeskewParameters);
        }

        /// <summary>
        /// Returns true if PDFAutoDeskewParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of PDFAutoDeskewParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PDFAutoDeskewParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FileId == input.FileId ||
                    (this.FileId != null &&
                    this.FileId.Equals(input.FileId))
                ) && 
                (
                    this.PageRange == input.PageRange ||
                    (this.PageRange != null &&
                    this.PageRange.Equals(input.PageRange))
                ) && 
                (
                    this.MaxAngleOfResearch == input.MaxAngleOfResearch ||
                    (this.MaxAngleOfResearch != null &&
                    this.MaxAngleOfResearch.Equals(input.MaxAngleOfResearch))
                ) && 
                (
                    this.AngleStep == input.AngleStep ||
                    (this.AngleStep != null &&
                    this.AngleStep.Equals(input.AngleStep))
                ) && 
                (
                    this.Optimistic == input.Optimistic ||
                    (this.Optimistic != null &&
                    this.Optimistic.Equals(input.Optimistic))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileId != null)
                    hashCode = hashCode * 59 + this.FileId.GetHashCode();
                if (this.PageRange != null)
                    hashCode = hashCode * 59 + this.PageRange.GetHashCode();
                if (this.MaxAngleOfResearch != null)
                    hashCode = hashCode * 59 + this.MaxAngleOfResearch.GetHashCode();
                if (this.AngleStep != null)
                    hashCode = hashCode * 59 + this.AngleStep.GetHashCode();
                if (this.Optimistic != null)
                    hashCode = hashCode * 59 + this.Optimistic.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
