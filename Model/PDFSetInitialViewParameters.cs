/* 
 * PassportPDF
 *
 * Copyright Â© 2018 ORPALIS - http://www.orpalis.com
 *
 * OpenAPI spec version: v1
 * Contact: contact@orpalis.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PassportPDF.Client.SwaggerDateConverter;

namespace PassportPDF.Model
{
    /// <summary>
    /// Represents the parameters for a set initial view action.
    /// </summary>
    [DataContract]
    public partial class PDFSetInitialViewParameters :  IEquatable<PDFSetInitialViewParameters>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets PageMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PageModeEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Outline for "Outline"
            /// </summary>
            [EnumMember(Value = "Outline")]
            Outline = 2,
            
            /// <summary>
            /// Enum Thumbnails for "Thumbnails"
            /// </summary>
            [EnumMember(Value = "Thumbnails")]
            Thumbnails = 3,
            
            /// <summary>
            /// Enum FullScreen for "FullScreen"
            /// </summary>
            [EnumMember(Value = "FullScreen")]
            FullScreen = 4,
            
            /// <summary>
            /// Enum OC for "OC"
            /// </summary>
            [EnumMember(Value = "OC")]
            OC = 5,
            
            /// <summary>
            /// Enum Attachments for "Attachments"
            /// </summary>
            [EnumMember(Value = "Attachments")]
            Attachments = 6
        }

        /// <summary>
        /// Gets or Sets PageMode
        /// </summary>
        [DataMember(Name="pageMode", EmitDefaultValue=false)]
        public PageModeEnum? PageMode { get; set; }
        /// <summary>
        /// Gets or Sets LayoutMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LayoutModeEnum
        {
            
            /// <summary>
            /// Enum SinglePage for "SinglePage"
            /// </summary>
            [EnumMember(Value = "SinglePage")]
            SinglePage = 1,
            
            /// <summary>
            /// Enum OneColumn for "OneColumn"
            /// </summary>
            [EnumMember(Value = "OneColumn")]
            OneColumn = 2,
            
            /// <summary>
            /// Enum TwoColumnLeft for "TwoColumnLeft"
            /// </summary>
            [EnumMember(Value = "TwoColumnLeft")]
            TwoColumnLeft = 3,
            
            /// <summary>
            /// Enum TwoColumnRight for "TwoColumnRight"
            /// </summary>
            [EnumMember(Value = "TwoColumnRight")]
            TwoColumnRight = 4,
            
            /// <summary>
            /// Enum TwoPageLeft for "TwoPageLeft"
            /// </summary>
            [EnumMember(Value = "TwoPageLeft")]
            TwoPageLeft = 5,
            
            /// <summary>
            /// Enum TwoPageRight for "TwoPageRight"
            /// </summary>
            [EnumMember(Value = "TwoPageRight")]
            TwoPageRight = 6
        }

        /// <summary>
        /// Gets or Sets LayoutMode
        /// </summary>
        [DataMember(Name="layoutMode", EmitDefaultValue=false)]
        public LayoutModeEnum? LayoutMode { get; set; }
        /// <summary>
        /// Gets or Sets NonFullScreenPageMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NonFullScreenPageModeEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Outline for "Outline"
            /// </summary>
            [EnumMember(Value = "Outline")]
            Outline = 2,
            
            /// <summary>
            /// Enum Thumbnails for "Thumbnails"
            /// </summary>
            [EnumMember(Value = "Thumbnails")]
            Thumbnails = 3,
            
            /// <summary>
            /// Enum OC for "OC"
            /// </summary>
            [EnumMember(Value = "OC")]
            OC = 4
        }

        /// <summary>
        /// Gets or Sets NonFullScreenPageMode
        /// </summary>
        [DataMember(Name="nonFullScreenPageMode", EmitDefaultValue=false)]
        public NonFullScreenPageModeEnum? NonFullScreenPageMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PDFSetInitialViewParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PDFSetInitialViewParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PDFSetInitialViewParameters" /> class.
        /// </summary>
        /// <param name="FileId">FileId (required).</param>
        /// <param name="PageMode">PageMode (default to PageModeEnum.None).</param>
        /// <param name="LayoutMode">LayoutMode (default to LayoutModeEnum.SinglePage).</param>
        /// <param name="NonFullScreenPageMode">NonFullScreenPageMode (default to NonFullScreenPageModeEnum.None).</param>
        /// <param name="OpenPage">OpenPage (default to 1).</param>
        /// <param name="OpenZoom">OpenZoom (default to 1.0F).</param>
        /// <param name="HideToolbar">HideToolbar.</param>
        /// <param name="HideMenubar">HideMenubar.</param>
        /// <param name="HideWindowUI">HideWindowUI.</param>
        /// <param name="FitWindow">FitWindow.</param>
        /// <param name="CenterWindow">CenterWindow.</param>
        /// <param name="DisplayDocTitle">DisplayDocTitle.</param>
        public PDFSetInitialViewParameters(string FileId = default(string), PageModeEnum? PageMode = PageModeEnum.None, LayoutModeEnum? LayoutMode = LayoutModeEnum.SinglePage, NonFullScreenPageModeEnum? NonFullScreenPageMode = NonFullScreenPageModeEnum.None, int? OpenPage = 1, float? OpenZoom = 1.0F, bool? HideToolbar = default(bool?), bool? HideMenubar = default(bool?), bool? HideWindowUI = default(bool?), bool? FitWindow = default(bool?), bool? CenterWindow = default(bool?), bool? DisplayDocTitle = default(bool?))
        {
            // to ensure "FileId" is required (not null)
            if (FileId == null)
            {
                throw new InvalidDataException("FileId is a required property for PDFSetInitialViewParameters and cannot be null");
            }
            else
            {
                this.FileId = FileId;
            }
            // use default value if no "PageMode" provided
            if (PageMode == null)
            {
                this.PageMode = PageModeEnum.None;
            }
            else
            {
                this.PageMode = PageMode;
            }
            // use default value if no "LayoutMode" provided
            if (LayoutMode == null)
            {
                this.LayoutMode = LayoutModeEnum.SinglePage;
            }
            else
            {
                this.LayoutMode = LayoutMode;
            }
            // use default value if no "NonFullScreenPageMode" provided
            if (NonFullScreenPageMode == null)
            {
                this.NonFullScreenPageMode = NonFullScreenPageModeEnum.None;
            }
            else
            {
                this.NonFullScreenPageMode = NonFullScreenPageMode;
            }
            // use default value if no "OpenPage" provided
            if (OpenPage == null)
            {
                this.OpenPage = 1;
            }
            else
            {
                this.OpenPage = OpenPage;
            }
            // use default value if no "OpenZoom" provided
            if (OpenZoom == null)
            {
                this.OpenZoom = 1.0F;
            }
            else
            {
                this.OpenZoom = OpenZoom;
            }
            this.HideToolbar = HideToolbar;
            this.HideMenubar = HideMenubar;
            this.HideWindowUI = HideWindowUI;
            this.FitWindow = FitWindow;
            this.CenterWindow = CenterWindow;
            this.DisplayDocTitle = DisplayDocTitle;
        }
        
        /// <summary>
        /// Gets or Sets FileId
        /// </summary>
        [DataMember(Name="fileId", EmitDefaultValue=false)]
        public string FileId { get; set; }




        /// <summary>
        /// Gets or Sets OpenPage
        /// </summary>
        [DataMember(Name="openPage", EmitDefaultValue=false)]
        public int? OpenPage { get; set; }

        /// <summary>
        /// Gets or Sets OpenZoom
        /// </summary>
        [DataMember(Name="openZoom", EmitDefaultValue=false)]
        public float? OpenZoom { get; set; }

        /// <summary>
        /// Gets or Sets HideToolbar
        /// </summary>
        [DataMember(Name="hideToolbar", EmitDefaultValue=false)]
        public bool? HideToolbar { get; set; }

        /// <summary>
        /// Gets or Sets HideMenubar
        /// </summary>
        [DataMember(Name="hideMenubar", EmitDefaultValue=false)]
        public bool? HideMenubar { get; set; }

        /// <summary>
        /// Gets or Sets HideWindowUI
        /// </summary>
        [DataMember(Name="hideWindowUI", EmitDefaultValue=false)]
        public bool? HideWindowUI { get; set; }

        /// <summary>
        /// Gets or Sets FitWindow
        /// </summary>
        [DataMember(Name="fitWindow", EmitDefaultValue=false)]
        public bool? FitWindow { get; set; }

        /// <summary>
        /// Gets or Sets CenterWindow
        /// </summary>
        [DataMember(Name="centerWindow", EmitDefaultValue=false)]
        public bool? CenterWindow { get; set; }

        /// <summary>
        /// Gets or Sets DisplayDocTitle
        /// </summary>
        [DataMember(Name="displayDocTitle", EmitDefaultValue=false)]
        public bool? DisplayDocTitle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PDFSetInitialViewParameters {\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  PageMode: ").Append(PageMode).Append("\n");
            sb.Append("  LayoutMode: ").Append(LayoutMode).Append("\n");
            sb.Append("  NonFullScreenPageMode: ").Append(NonFullScreenPageMode).Append("\n");
            sb.Append("  OpenPage: ").Append(OpenPage).Append("\n");
            sb.Append("  OpenZoom: ").Append(OpenZoom).Append("\n");
            sb.Append("  HideToolbar: ").Append(HideToolbar).Append("\n");
            sb.Append("  HideMenubar: ").Append(HideMenubar).Append("\n");
            sb.Append("  HideWindowUI: ").Append(HideWindowUI).Append("\n");
            sb.Append("  FitWindow: ").Append(FitWindow).Append("\n");
            sb.Append("  CenterWindow: ").Append(CenterWindow).Append("\n");
            sb.Append("  DisplayDocTitle: ").Append(DisplayDocTitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PDFSetInitialViewParameters);
        }

        /// <summary>
        /// Returns true if PDFSetInitialViewParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of PDFSetInitialViewParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PDFSetInitialViewParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FileId == input.FileId ||
                    (this.FileId != null &&
                    this.FileId.Equals(input.FileId))
                ) && 
                (
                    this.PageMode == input.PageMode ||
                    (this.PageMode != null &&
                    this.PageMode.Equals(input.PageMode))
                ) && 
                (
                    this.LayoutMode == input.LayoutMode ||
                    (this.LayoutMode != null &&
                    this.LayoutMode.Equals(input.LayoutMode))
                ) && 
                (
                    this.NonFullScreenPageMode == input.NonFullScreenPageMode ||
                    (this.NonFullScreenPageMode != null &&
                    this.NonFullScreenPageMode.Equals(input.NonFullScreenPageMode))
                ) && 
                (
                    this.OpenPage == input.OpenPage ||
                    (this.OpenPage != null &&
                    this.OpenPage.Equals(input.OpenPage))
                ) && 
                (
                    this.OpenZoom == input.OpenZoom ||
                    (this.OpenZoom != null &&
                    this.OpenZoom.Equals(input.OpenZoom))
                ) && 
                (
                    this.HideToolbar == input.HideToolbar ||
                    (this.HideToolbar != null &&
                    this.HideToolbar.Equals(input.HideToolbar))
                ) && 
                (
                    this.HideMenubar == input.HideMenubar ||
                    (this.HideMenubar != null &&
                    this.HideMenubar.Equals(input.HideMenubar))
                ) && 
                (
                    this.HideWindowUI == input.HideWindowUI ||
                    (this.HideWindowUI != null &&
                    this.HideWindowUI.Equals(input.HideWindowUI))
                ) && 
                (
                    this.FitWindow == input.FitWindow ||
                    (this.FitWindow != null &&
                    this.FitWindow.Equals(input.FitWindow))
                ) && 
                (
                    this.CenterWindow == input.CenterWindow ||
                    (this.CenterWindow != null &&
                    this.CenterWindow.Equals(input.CenterWindow))
                ) && 
                (
                    this.DisplayDocTitle == input.DisplayDocTitle ||
                    (this.DisplayDocTitle != null &&
                    this.DisplayDocTitle.Equals(input.DisplayDocTitle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileId != null)
                    hashCode = hashCode * 59 + this.FileId.GetHashCode();
                if (this.PageMode != null)
                    hashCode = hashCode * 59 + this.PageMode.GetHashCode();
                if (this.LayoutMode != null)
                    hashCode = hashCode * 59 + this.LayoutMode.GetHashCode();
                if (this.NonFullScreenPageMode != null)
                    hashCode = hashCode * 59 + this.NonFullScreenPageMode.GetHashCode();
                if (this.OpenPage != null)
                    hashCode = hashCode * 59 + this.OpenPage.GetHashCode();
                if (this.OpenZoom != null)
                    hashCode = hashCode * 59 + this.OpenZoom.GetHashCode();
                if (this.HideToolbar != null)
                    hashCode = hashCode * 59 + this.HideToolbar.GetHashCode();
                if (this.HideMenubar != null)
                    hashCode = hashCode * 59 + this.HideMenubar.GetHashCode();
                if (this.HideWindowUI != null)
                    hashCode = hashCode * 59 + this.HideWindowUI.GetHashCode();
                if (this.FitWindow != null)
                    hashCode = hashCode * 59 + this.FitWindow.GetHashCode();
                if (this.CenterWindow != null)
                    hashCode = hashCode * 59 + this.CenterWindow.GetHashCode();
                if (this.DisplayDocTitle != null)
                    hashCode = hashCode * 59 + this.DisplayDocTitle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
